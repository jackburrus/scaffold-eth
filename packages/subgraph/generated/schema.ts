// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Ink extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ink entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ink entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ink", id.toString(), this);
  }

  static load(id: string): Ink | null {
    return store.get("Ink", id) as Ink | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inkNumber(): BigInt {
    let value = this.get("inkNumber");
    return value.toBigInt();
  }

  set inkNumber(value: BigInt) {
    this.set("inkNumber", Value.fromBigInt(value));
  }

  get jsonUrl(): string {
    let value = this.get("jsonUrl");
    return value.toString();
  }

  set jsonUrl(value: string) {
    this.set("jsonUrl", Value.fromString(value));
  }

  get artist(): string {
    let value = this.get("artist");
    return value.toString();
  }

  set artist(value: string) {
    this.set("artist", Value.fromString(value));
  }

  get limit(): BigInt {
    let value = this.get("limit");
    return value.toBigInt();
  }

  set limit(value: BigInt) {
    this.set("limit", Value.fromBigInt(value));
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Artist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Artist entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Artist entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Artist", id.toString(), this);
  }

  static load(id: string): Artist | null {
    return store.get("Artist", id) as Artist | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get inks(): Array<string | null> {
    let value = this.get("inks");
    return value.toStringArray();
  }

  set inks(value: Array<string | null>) {
    this.set("inks", Value.fromStringArray(value));
  }

  get inkCount(): BigInt {
    let value = this.get("inkCount");
    return value.toBigInt();
  }

  set inkCount(value: BigInt) {
    this.set("inkCount", Value.fromBigInt(value));
  }
}

export class DayTotal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DayTotal entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DayTotal entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DayTotal", id.toString(), this);
  }

  static load(id: string): DayTotal | null {
    return store.get("DayTotal", id) as DayTotal | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get inks(): BigInt | null {
    let value = this.get("inks");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inks(value: BigInt | null) {
    if (value === null) {
      this.unset("inks");
    } else {
      this.set("inks", Value.fromBigInt(value as BigInt));
    }
  }

  get artists(): BigInt | null {
    let value = this.get("artists");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set artists(value: BigInt | null) {
    if (value === null) {
      this.unset("artists");
    } else {
      this.set("artists", Value.fromBigInt(value as BigInt));
    }
  }
}
